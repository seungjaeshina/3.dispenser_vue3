{"ast":null,"code":"import axios from 'axios';\nimport { Message, MessageBox } from 'element-ui';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth';\nconst service = axios.create({\n  baseURL: process.env.BASE_API,\n  timeout: 5000 // request timeout\n});\n\n// request interceptor\nservice.interceptors.request.use(config => {\n  // Do something before request is sent\n  if (store.getters.token) {\n    config.headers['X-KoreaPost-Token'] = getToken();\n  }\n  return config;\n}, error => {\n  // Do something with request error\n  console.log(error); // for debug\n  Promise.reject(error);\n});\n\n// response interceptor\nservice.interceptors.response.use(response => {\n  const res = response.data;\n  if (res.errno === 501) {\n    MessageBox.alert('다시 로그인 해주세요.', '알림', {\n      confirmButtonText: '확인',\n      type: 'error'\n    }).then(() => {\n      store.dispatch('FedLogOut').then(() => {\n        location.reload();\n      });\n    });\n    return Promise.reject('error');\n  } else if (res.errno === 502) {\n    MessageBox.alert('관리자에게 문의 바랍니다.', '알림', {\n      confirmButtonText: '확인',\n      type: 'error'\n    });\n    return Promise.reject('error');\n  } else if (res.errno === 503) {\n    MessageBox.alert('현재 지원되지 않습니다.', '알림', {\n      confirmButtonText: '확인',\n      type: 'error'\n    });\n    return Promise.reject('error');\n  } else if (res.errno === 504) {\n    MessageBox.alert('페이지를 새로고침 해 주세요.', '알림', {\n      confirmButtonText: '확인',\n      type: 'error'\n    });\n    return Promise.reject('error');\n  } else if (res.errno === 505) {\n    MessageBox.alert('업데이트에 실패 했습니다.', '알림', {\n      confirmButtonText: '확인',\n      type: 'error'\n    });\n    return Promise.reject('error');\n  } else if (res.errno === 506) {\n    MessageBox.alert('관리자 권한이 없습니다.', '알림', {\n      confirmButtonText: '확인',\n      type: 'error'\n    });\n    return Promise.reject('error');\n  } else if (res.errno !== 0) {\n    return Promise.reject(response);\n  } else {\n    return response;\n  }\n}, error => {\n  console.log('err' + error); // for debug\n  Message({\n    message: '세션시간이 종료 되었습니다. 다시 로그인 해주세요.',\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","Message","MessageBox","store","getToken","service","create","baseURL","process","env","BASE_API","timeout","interceptors","request","use","config","getters","token","headers","error","console","log","Promise","reject","response","res","data","errno","alert","confirmButtonText","type","then","dispatch","location","reload","message","duration"],"sources":["F:/solution/solution/KoreaPost/koreapost/3.dispenser_vue3/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { Message, MessageBox } from 'element-ui'\nimport store from '@/store'\nimport { getToken } from '@/utils/auth'\n\nconst service = axios.create({\n  baseURL: process.env.BASE_API, \n  timeout: 5000 // request timeout\n})\n\n// request interceptor\nservice.interceptors.request.use(\n  config => {\n    // Do something before request is sent\n    if (store.getters.token) {\n      config.headers['X-KoreaPost-Token'] = getToken()\n    }\n    return config\n  },\n  error => {\n    // Do something with request error\n    console.log(error) // for debug\n    Promise.reject(error)\n  }\n)\n\n// response interceptor\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n\n    if (res.errno === 501) {\n      MessageBox.alert('다시 로그인 해주세요.', '알림', {\n        confirmButtonText: '확인',\n        type: 'error'\n      }).then(() => {\n        store.dispatch('FedLogOut').then(() => {\n          location.reload()\n        })\n      })\n      return Promise.reject('error')\n    } else if (res.errno === 502) {\n      MessageBox.alert('관리자에게 문의 바랍니다.', '알림', {\n        confirmButtonText: '확인',\n        type: 'error'\n      })\n      return Promise.reject('error')\n    } else if (res.errno === 503) {\n      MessageBox.alert('현재 지원되지 않습니다.', '알림', {\n        confirmButtonText: '확인',\n        type: 'error'\n      })\n      return Promise.reject('error')\n    } else if (res.errno === 504) {\n      MessageBox.alert('페이지를 새로고침 해 주세요.', '알림', {\n        confirmButtonText: '확인',\n        type: 'error'\n      })\n      return Promise.reject('error')\n    } else if (res.errno === 505) {\n      MessageBox.alert('업데이트에 실패 했습니다.', '알림', {\n        confirmButtonText: '확인',\n        type: 'error'\n      })\n      return Promise.reject('error')\n    } else if (res.errno === 506) {\n      MessageBox.alert('관리자 권한이 없습니다.', '알림', {\n        confirmButtonText: '확인',\n        type: 'error'\n      })\n      return Promise.reject('error')\n    } else if (res.errno !== 0) {\n      return Promise.reject(response)\n    } else {\n      return response\n    }\n  }, error => {\n    console.log('err' + error)// for debug\n    Message({\n      message: '세션시간이 종료 되었습니다. 다시 로그인 해주세요.',\n      type: 'error',\n      duration: 5 * 1000\n    })\n    return Promise.reject(error)\n  })\n\nexport default service\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}