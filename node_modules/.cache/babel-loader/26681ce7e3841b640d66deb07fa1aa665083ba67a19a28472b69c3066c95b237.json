{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"D:/0610/1020_KoreaPost/2.Dispenser/02.Source/3.dispenser_vue3/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadyParser = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * A transform stream that waits for a sequence of \"ready\" bytes before emitting a ready event and emitting data events\n *\n * To use the `Ready` parser provide a byte start sequence. After the bytes have been received a ready event is fired and data events are passed through.\n */\nclass ReadyParser extends stream_1.Transform {\n  constructor({\n    delimiter,\n    ...options\n  }) {\n    if (delimiter === undefined) {\n      throw new TypeError('\"delimiter\" is not a bufferable object');\n    }\n    if (delimiter.length === 0) {\n      throw new TypeError('\"delimiter\" has a 0 or undefined length');\n    }\n    super(options);\n    _defineProperty(this, \"delimiter\", void 0);\n    _defineProperty(this, \"readOffset\", void 0);\n    _defineProperty(this, \"ready\", void 0);\n    this.delimiter = Buffer.from(delimiter);\n    this.readOffset = 0;\n    this.ready = false;\n  }\n  _transform(chunk, encoding, cb) {\n    if (this.ready) {\n      this.push(chunk);\n      return cb();\n    }\n    const delimiter = this.delimiter;\n    let chunkOffset = 0;\n    while (this.readOffset < delimiter.length && chunkOffset < chunk.length) {\n      if (delimiter[this.readOffset] === chunk[chunkOffset]) {\n        this.readOffset++;\n      } else {\n        this.readOffset = 0;\n      }\n      chunkOffset++;\n    }\n    if (this.readOffset === delimiter.length) {\n      this.ready = true;\n      this.emit('ready');\n      const chunkRest = chunk.slice(chunkOffset);\n      if (chunkRest.length > 0) {\n        this.push(chunkRest);\n      }\n    }\n    cb();\n  }\n}\nexports.ReadyParser = ReadyParser;","map":{"version":3,"names":["_defineProperty","require","default","Object","defineProperty","exports","value","ReadyParser","stream_1","Transform","constructor","delimiter","options","undefined","TypeError","length","Buffer","from","readOffset","ready","_transform","chunk","encoding","cb","push","chunkOffset","emit","chunkRest","slice"],"sources":["D:/0610/1020_KoreaPost/2.Dispenser/02.Source/3.dispenser_vue3/node_modules/@serialport/parser-ready/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadyParser = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * A transform stream that waits for a sequence of \"ready\" bytes before emitting a ready event and emitting data events\n *\n * To use the `Ready` parser provide a byte start sequence. After the bytes have been received a ready event is fired and data events are passed through.\n */\nclass ReadyParser extends stream_1.Transform {\n    delimiter;\n    readOffset;\n    ready;\n    constructor({ delimiter, ...options }) {\n        if (delimiter === undefined) {\n            throw new TypeError('\"delimiter\" is not a bufferable object');\n        }\n        if (delimiter.length === 0) {\n            throw new TypeError('\"delimiter\" has a 0 or undefined length');\n        }\n        super(options);\n        this.delimiter = Buffer.from(delimiter);\n        this.readOffset = 0;\n        this.ready = false;\n    }\n    _transform(chunk, encoding, cb) {\n        if (this.ready) {\n            this.push(chunk);\n            return cb();\n        }\n        const delimiter = this.delimiter;\n        let chunkOffset = 0;\n        while (this.readOffset < delimiter.length && chunkOffset < chunk.length) {\n            if (delimiter[this.readOffset] === chunk[chunkOffset]) {\n                this.readOffset++;\n            }\n            else {\n                this.readOffset = 0;\n            }\n            chunkOffset++;\n        }\n        if (this.readOffset === delimiter.length) {\n            this.ready = true;\n            this.emit('ready');\n            const chunkRest = chunk.slice(chunkOffset);\n            if (chunkRest.length > 0) {\n                this.push(chunkRest);\n            }\n        }\n        cb();\n    }\n}\nexports.ReadyParser = ReadyParser;\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,eAAA,GAAAC,OAAA,wHAAAC,OAAA;AAAAD,OAAA;AACbE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAG,KAAK,CAAC;AAC5B,MAAMC,QAAQ,GAAGP,OAAO,CAAC,QAAQ,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA,MAAMM,WAAW,SAASC,QAAQ,CAACC,SAAS,CAAC;EAIzCC,WAAWA,CAAC;IAAEC,SAAS;IAAE,GAAGC;EAAQ,CAAC,EAAE;IACnC,IAAID,SAAS,KAAKE,SAAS,EAAE;MACzB,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;IACjE;IACA,IAAIH,SAAS,CAACI,MAAM,KAAK,CAAC,EAAE;MACxB,MAAM,IAAID,SAAS,CAAC,yCAAyC,CAAC;IAClE;IACA,KAAK,CAACF,OAAO,CAAC;IAACZ,eAAA;IAAAA,eAAA;IAAAA,eAAA;IACf,IAAI,CAACW,SAAS,GAAGK,MAAM,CAACC,IAAI,CAACN,SAAS,CAAC;IACvC,IAAI,CAACO,UAAU,GAAG,CAAC;IACnB,IAAI,CAACC,KAAK,GAAG,KAAK;EACtB;EACAC,UAAUA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,EAAE,EAAE;IAC5B,IAAI,IAAI,CAACJ,KAAK,EAAE;MACZ,IAAI,CAACK,IAAI,CAACH,KAAK,CAAC;MAChB,OAAOE,EAAE,CAAC,CAAC;IACf;IACA,MAAMZ,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,IAAIc,WAAW,GAAG,CAAC;IACnB,OAAO,IAAI,CAACP,UAAU,GAAGP,SAAS,CAACI,MAAM,IAAIU,WAAW,GAAGJ,KAAK,CAACN,MAAM,EAAE;MACrE,IAAIJ,SAAS,CAAC,IAAI,CAACO,UAAU,CAAC,KAAKG,KAAK,CAACI,WAAW,CAAC,EAAE;QACnD,IAAI,CAACP,UAAU,EAAE;MACrB,CAAC,MACI;QACD,IAAI,CAACA,UAAU,GAAG,CAAC;MACvB;MACAO,WAAW,EAAE;IACjB;IACA,IAAI,IAAI,CAACP,UAAU,KAAKP,SAAS,CAACI,MAAM,EAAE;MACtC,IAAI,CAACI,KAAK,GAAG,IAAI;MACjB,IAAI,CAACO,IAAI,CAAC,OAAO,CAAC;MAClB,MAAMC,SAAS,GAAGN,KAAK,CAACO,KAAK,CAACH,WAAW,CAAC;MAC1C,IAAIE,SAAS,CAACZ,MAAM,GAAG,CAAC,EAAE;QACtB,IAAI,CAACS,IAAI,CAACG,SAAS,CAAC;MACxB;IACJ;IACAJ,EAAE,CAAC,CAAC;EACR;AACJ;AACAlB,OAAO,CAACE,WAAW,GAAGA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}