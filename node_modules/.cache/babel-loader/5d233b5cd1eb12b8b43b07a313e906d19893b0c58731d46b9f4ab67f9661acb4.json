{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"D:/0610/1020_KoreaPost/2.Dispenser/02.Source/3.dispenser_vue3/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SlipDecoder = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * A transform stream that decodes slip encoded data.\n * @extends Transform\n *\n * Runs in O(n) time, stripping out slip encoding and emitting decoded data. Optionally custom slip escape and delimiters can be provided.\n */\nclass SlipDecoder extends stream_1.Transform {\n  constructor(options = {}) {\n    super(options);\n    _defineProperty(this, \"opts\", void 0);\n    _defineProperty(this, \"buffer\", void 0);\n    _defineProperty(this, \"escape\", void 0);\n    _defineProperty(this, \"start\", void 0);\n    const {\n      START,\n      ESC = 0xdb,\n      END = 0xc0,\n      ESC_START,\n      ESC_END = 0xdc,\n      ESC_ESC = 0xdd\n    } = options;\n    this.opts = {\n      START,\n      ESC,\n      END,\n      ESC_START,\n      ESC_END,\n      ESC_ESC\n    };\n    this.buffer = Buffer.alloc(0);\n    this.escape = false;\n    this.start = false;\n  }\n  _transform(chunk, encoding, cb) {\n    for (let ndx = 0; ndx < chunk.length; ndx++) {\n      let byte = chunk[ndx];\n      if (byte === this.opts.START) {\n        this.start = true;\n        continue;\n      } else if (undefined == this.opts.START) {\n        this.start = true;\n      }\n      if (this.escape) {\n        if (byte === this.opts.ESC_START && this.opts.START) {\n          byte = this.opts.START;\n        } else if (byte === this.opts.ESC_ESC) {\n          byte = this.opts.ESC;\n        } else if (byte === this.opts.ESC_END) {\n          byte = this.opts.END;\n        } else {\n          this.escape = false;\n          this.push(this.buffer);\n          this.buffer = Buffer.alloc(0);\n        }\n      } else {\n        if (byte === this.opts.ESC) {\n          this.escape = true;\n          continue;\n        }\n        if (byte === this.opts.END) {\n          this.push(this.buffer);\n          this.buffer = Buffer.alloc(0);\n          this.escape = false;\n          this.start = false;\n          continue;\n        }\n      }\n      this.escape = false;\n      if (this.start) {\n        this.buffer = Buffer.concat([this.buffer, Buffer.from([byte])]);\n      }\n    }\n    cb();\n  }\n  _flush(cb) {\n    this.push(this.buffer);\n    this.buffer = Buffer.alloc(0);\n    cb();\n  }\n}\nexports.SlipDecoder = SlipDecoder;","map":{"version":3,"names":["_defineProperty","require","default","Object","defineProperty","exports","value","SlipDecoder","stream_1","Transform","constructor","options","START","ESC","END","ESC_START","ESC_END","ESC_ESC","opts","buffer","Buffer","alloc","escape","start","_transform","chunk","encoding","cb","ndx","length","byte","undefined","push","concat","from","_flush"],"sources":["D:/0610/1020_KoreaPost/2.Dispenser/02.Source/3.dispenser_vue3/node_modules/@serialport/parser-slip-encoder/dist/decoder.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlipDecoder = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * A transform stream that decodes slip encoded data.\n * @extends Transform\n *\n * Runs in O(n) time, stripping out slip encoding and emitting decoded data. Optionally custom slip escape and delimiters can be provided.\n */\nclass SlipDecoder extends stream_1.Transform {\n    opts;\n    buffer;\n    escape;\n    start;\n    constructor(options = {}) {\n        super(options);\n        const { START, ESC = 0xdb, END = 0xc0, ESC_START, ESC_END = 0xdc, ESC_ESC = 0xdd } = options;\n        this.opts = {\n            START,\n            ESC,\n            END,\n            ESC_START,\n            ESC_END,\n            ESC_ESC,\n        };\n        this.buffer = Buffer.alloc(0);\n        this.escape = false;\n        this.start = false;\n    }\n    _transform(chunk, encoding, cb) {\n        for (let ndx = 0; ndx < chunk.length; ndx++) {\n            let byte = chunk[ndx];\n            if (byte === this.opts.START) {\n                this.start = true;\n                continue;\n            }\n            else if (undefined == this.opts.START) {\n                this.start = true;\n            }\n            if (this.escape) {\n                if (byte === this.opts.ESC_START && this.opts.START) {\n                    byte = this.opts.START;\n                }\n                else if (byte === this.opts.ESC_ESC) {\n                    byte = this.opts.ESC;\n                }\n                else if (byte === this.opts.ESC_END) {\n                    byte = this.opts.END;\n                }\n                else {\n                    this.escape = false;\n                    this.push(this.buffer);\n                    this.buffer = Buffer.alloc(0);\n                }\n            }\n            else {\n                if (byte === this.opts.ESC) {\n                    this.escape = true;\n                    continue;\n                }\n                if (byte === this.opts.END) {\n                    this.push(this.buffer);\n                    this.buffer = Buffer.alloc(0);\n                    this.escape = false;\n                    this.start = false;\n                    continue;\n                }\n            }\n            this.escape = false;\n            if (this.start) {\n                this.buffer = Buffer.concat([this.buffer, Buffer.from([byte])]);\n            }\n        }\n        cb();\n    }\n    _flush(cb) {\n        this.push(this.buffer);\n        this.buffer = Buffer.alloc(0);\n        cb();\n    }\n}\nexports.SlipDecoder = SlipDecoder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}